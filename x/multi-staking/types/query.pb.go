// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multistaking/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryMultiStakingLocks struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMultiStakingLocks) Reset()         { *m = QueryMultiStakingLocks{} }
func (m *QueryMultiStakingLocks) String() string { return proto.CompactTextString(m) }
func (*QueryMultiStakingLocks) ProtoMessage()    {}
func (*QueryMultiStakingLocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{0}
}
func (m *QueryMultiStakingLocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiStakingLocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiStakingLocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiStakingLocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiStakingLocks.Merge(m, src)
}
func (m *QueryMultiStakingLocks) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiStakingLocks) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiStakingLocks.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiStakingLocks proto.InternalMessageInfo

func (m *QueryMultiStakingLocks) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMultiStakingLocksResponse struct {
	Locks      []*MultiStakingLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMultiStakingLocksResponse) Reset()         { *m = QueryMultiStakingLocksResponse{} }
func (m *QueryMultiStakingLocksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultiStakingLocksResponse) ProtoMessage()    {}
func (*QueryMultiStakingLocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{1}
}
func (m *QueryMultiStakingLocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiStakingLocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiStakingLocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiStakingLocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiStakingLocksResponse.Merge(m, src)
}
func (m *QueryMultiStakingLocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiStakingLocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiStakingLocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiStakingLocksResponse proto.InternalMessageInfo

func (m *QueryMultiStakingLocksResponse) GetLocks() []*MultiStakingLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

func (m *QueryMultiStakingLocksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMultiStakingLock struct {
	DelegatorAddr string `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryMultiStakingLock) Reset()         { *m = QueryMultiStakingLock{} }
func (m *QueryMultiStakingLock) String() string { return proto.CompactTextString(m) }
func (*QueryMultiStakingLock) ProtoMessage()    {}
func (*QueryMultiStakingLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{2}
}
func (m *QueryMultiStakingLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiStakingLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiStakingLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiStakingLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiStakingLock.Merge(m, src)
}
func (m *QueryMultiStakingLock) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiStakingLock) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiStakingLock.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiStakingLock proto.InternalMessageInfo

type QueryMultiStakingLockResponse struct {
	Lock  *MultiStakingLock `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock,omitempty"`
	Found bool              `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryMultiStakingLockResponse) Reset()         { *m = QueryMultiStakingLockResponse{} }
func (m *QueryMultiStakingLockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultiStakingLockResponse) ProtoMessage()    {}
func (*QueryMultiStakingLockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{3}
}
func (m *QueryMultiStakingLockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiStakingLockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiStakingLockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiStakingLockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiStakingLockResponse.Merge(m, src)
}
func (m *QueryMultiStakingLockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiStakingLockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiStakingLockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiStakingLockResponse proto.InternalMessageInfo

func (m *QueryMultiStakingLockResponse) GetLock() *MultiStakingLock {
	if m != nil {
		return m.Lock
	}
	return nil
}

func (m *QueryMultiStakingLockResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryMultiStakingUnlocks struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMultiStakingUnlocks) Reset()         { *m = QueryMultiStakingUnlocks{} }
func (m *QueryMultiStakingUnlocks) String() string { return proto.CompactTextString(m) }
func (*QueryMultiStakingUnlocks) ProtoMessage()    {}
func (*QueryMultiStakingUnlocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{4}
}
func (m *QueryMultiStakingUnlocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiStakingUnlocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiStakingUnlocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiStakingUnlocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiStakingUnlocks.Merge(m, src)
}
func (m *QueryMultiStakingUnlocks) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiStakingUnlocks) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiStakingUnlocks.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiStakingUnlocks proto.InternalMessageInfo

func (m *QueryMultiStakingUnlocks) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMultiStakingUnlocksResponse struct {
	Unlocks    []*MultiStakingUnlock `protobuf:"bytes,1,rep,name=unlocks,proto3" json:"unlocks,omitempty"`
	Pagination *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMultiStakingUnlocksResponse) Reset()         { *m = QueryMultiStakingUnlocksResponse{} }
func (m *QueryMultiStakingUnlocksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultiStakingUnlocksResponse) ProtoMessage()    {}
func (*QueryMultiStakingUnlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{5}
}
func (m *QueryMultiStakingUnlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiStakingUnlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiStakingUnlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiStakingUnlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiStakingUnlocksResponse.Merge(m, src)
}
func (m *QueryMultiStakingUnlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiStakingUnlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiStakingUnlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiStakingUnlocksResponse proto.InternalMessageInfo

func (m *QueryMultiStakingUnlocksResponse) GetUnlocks() []*MultiStakingUnlock {
	if m != nil {
		return m.Unlocks
	}
	return nil
}

func (m *QueryMultiStakingUnlocksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMultiStakingUnlock struct {
	DelegatorAddr string `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryMultiStakingUnlock) Reset()         { *m = QueryMultiStakingUnlock{} }
func (m *QueryMultiStakingUnlock) String() string { return proto.CompactTextString(m) }
func (*QueryMultiStakingUnlock) ProtoMessage()    {}
func (*QueryMultiStakingUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{6}
}
func (m *QueryMultiStakingUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiStakingUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiStakingUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiStakingUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiStakingUnlock.Merge(m, src)
}
func (m *QueryMultiStakingUnlock) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiStakingUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiStakingUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiStakingUnlock proto.InternalMessageInfo

type QueryMultiStakingUnlockResponse struct {
	Unlock *MultiStakingUnlock `protobuf:"bytes,1,opt,name=unlock,proto3" json:"unlock,omitempty"`
	Found  bool                `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryMultiStakingUnlockResponse) Reset()         { *m = QueryMultiStakingUnlockResponse{} }
func (m *QueryMultiStakingUnlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultiStakingUnlockResponse) ProtoMessage()    {}
func (*QueryMultiStakingUnlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{7}
}
func (m *QueryMultiStakingUnlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiStakingUnlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiStakingUnlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiStakingUnlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiStakingUnlockResponse.Merge(m, src)
}
func (m *QueryMultiStakingUnlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiStakingUnlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiStakingUnlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiStakingUnlockResponse proto.InternalMessageInfo

func (m *QueryMultiStakingUnlockResponse) GetUnlock() *MultiStakingUnlock {
	if m != nil {
		return m.Unlock
	}
	return nil
}

func (m *QueryMultiStakingUnlockResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryBondWeight struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryBondWeight) Reset()         { *m = QueryBondWeight{} }
func (m *QueryBondWeight) String() string { return proto.CompactTextString(m) }
func (*QueryBondWeight) ProtoMessage()    {}
func (*QueryBondWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{8}
}
func (m *QueryBondWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondWeight.Merge(m, src)
}
func (m *QueryBondWeight) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondWeight.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondWeight proto.InternalMessageInfo

func (m *QueryBondWeight) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryBondWeightResponse struct {
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
	Found  bool                                   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryBondWeightResponse) Reset()         { *m = QueryBondWeightResponse{} }
func (m *QueryBondWeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBondWeightResponse) ProtoMessage()    {}
func (*QueryBondWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{9}
}
func (m *QueryBondWeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondWeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondWeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondWeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondWeightResponse.Merge(m, src)
}
func (m *QueryBondWeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondWeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondWeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondWeightResponse proto.InternalMessageInfo

func (m *QueryBondWeightResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryValidatorMultiStakingCoin struct {
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryValidatorMultiStakingCoin) Reset()         { *m = QueryValidatorMultiStakingCoin{} }
func (m *QueryValidatorMultiStakingCoin) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorMultiStakingCoin) ProtoMessage()    {}
func (*QueryValidatorMultiStakingCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{10}
}
func (m *QueryValidatorMultiStakingCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorMultiStakingCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorMultiStakingCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorMultiStakingCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorMultiStakingCoin.Merge(m, src)
}
func (m *QueryValidatorMultiStakingCoin) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorMultiStakingCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorMultiStakingCoin.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorMultiStakingCoin proto.InternalMessageInfo

type QueryValidatorMultiStakingCoinResponse struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryValidatorMultiStakingCoinResponse) Reset() {
	*m = QueryValidatorMultiStakingCoinResponse{}
}
func (m *QueryValidatorMultiStakingCoinResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorMultiStakingCoinResponse) ProtoMessage()    {}
func (*QueryValidatorMultiStakingCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82d174b604da394d, []int{11}
}
func (m *QueryValidatorMultiStakingCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorMultiStakingCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorMultiStakingCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorMultiStakingCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorMultiStakingCoinResponse.Merge(m, src)
}
func (m *QueryValidatorMultiStakingCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorMultiStakingCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorMultiStakingCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorMultiStakingCoinResponse proto.InternalMessageInfo

func (m *QueryValidatorMultiStakingCoinResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryMultiStakingLocks)(nil), "multistaking.v1.QueryMultiStakingLocks")
	proto.RegisterType((*QueryMultiStakingLocksResponse)(nil), "multistaking.v1.QueryMultiStakingLocksResponse")
	proto.RegisterType((*QueryMultiStakingLock)(nil), "multistaking.v1.QueryMultiStakingLock")
	proto.RegisterType((*QueryMultiStakingLockResponse)(nil), "multistaking.v1.QueryMultiStakingLockResponse")
	proto.RegisterType((*QueryMultiStakingUnlocks)(nil), "multistaking.v1.QueryMultiStakingUnlocks")
	proto.RegisterType((*QueryMultiStakingUnlocksResponse)(nil), "multistaking.v1.QueryMultiStakingUnlocksResponse")
	proto.RegisterType((*QueryMultiStakingUnlock)(nil), "multistaking.v1.QueryMultiStakingUnlock")
	proto.RegisterType((*QueryMultiStakingUnlockResponse)(nil), "multistaking.v1.QueryMultiStakingUnlockResponse")
	proto.RegisterType((*QueryBondWeight)(nil), "multistaking.v1.QueryBondWeight")
	proto.RegisterType((*QueryBondWeightResponse)(nil), "multistaking.v1.QueryBondWeightResponse")
	proto.RegisterType((*QueryValidatorMultiStakingCoin)(nil), "multistaking.v1.QueryValidatorMultiStakingCoin")
	proto.RegisterType((*QueryValidatorMultiStakingCoinResponse)(nil), "multistaking.v1.QueryValidatorMultiStakingCoinResponse")
}

func init() { proto.RegisterFile("multistaking/v1/query.proto", fileDescriptor_82d174b604da394d) }

var fileDescriptor_82d174b604da394d = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x6f, 0xd3, 0x48,
	0x14, 0xce, 0x74, 0xb7, 0xdd, 0xee, 0x54, 0xbb, 0xdd, 0x9d, 0xed, 0xee, 0xa6, 0x06, 0x92, 0x34,
	0x11, 0x69, 0x5a, 0x88, 0x4d, 0x82, 0x50, 0x05, 0xa5, 0x20, 0xd2, 0xa8, 0x48, 0xa8, 0x48, 0xe0,
	0xf2, 0x43, 0xe2, 0x52, 0x9c, 0x78, 0x70, 0xad, 0x38, 0x9e, 0x34, 0x76, 0x02, 0x55, 0xd5, 0x0b,
	0x12, 0x12, 0x07, 0x0e, 0x48, 0x5c, 0x90, 0xb8, 0x54, 0x20, 0x2e, 0x9c, 0x2b, 0x8e, 0x9c, 0x2b,
	0x4e, 0x55, 0xb9, 0x20, 0x0e, 0x15, 0x6a, 0x39, 0xf0, 0x67, 0x20, 0xcf, 0x4c, 0x9c, 0x5f, 0x76,
	0x62, 0x50, 0x0f, 0x9c, 0x92, 0x99, 0xf9, 0xde, 0xfb, 0xbe, 0xf7, 0xcd, 0x9b, 0x97, 0xc0, 0x23,
	0xe5, 0x9a, 0x61, 0xeb, 0x96, 0xad, 0x94, 0x74, 0x53, 0x93, 0xea, 0x19, 0x69, 0xb5, 0x86, 0xab,
	0x6b, 0x62, 0xa5, 0x4a, 0x6c, 0x82, 0x46, 0x5b, 0x0f, 0xc5, 0x7a, 0x46, 0x18, 0xd3, 0x88, 0x46,
	0xe8, 0x99, 0xe4, 0x7c, 0x63, 0x30, 0x61, 0xbc, 0x48, 0xac, 0x32, 0xb1, 0x96, 0xd9, 0x01, 0x5b,
	0xf0, 0xa3, 0x44, 0x67, 0x7a, 0xba, 0x5e, 0x6e, 0xa4, 0x64, 0xa0, 0x69, 0x16, 0x22, 0x15, 0x14,
	0x0b, 0x33, 0x7e, 0xa9, 0x9e, 0x29, 0x60, 0x5b, 0xc9, 0x48, 0x15, 0x45, 0xd3, 0x4d, 0xc5, 0xd6,
	0x89, 0xc9, 0xb1, 0x47, 0x35, 0x42, 0x34, 0x03, 0x4b, 0x4a, 0x45, 0x97, 0x14, 0xd3, 0x24, 0x36,
	0x3d, 0xe4, 0x74, 0xf1, 0xbb, 0xf0, 0xbf, 0xeb, 0x4e, 0xfc, 0x55, 0x87, 0x65, 0x89, 0x91, 0x2c,
	0x92, 0x62, 0xc9, 0x42, 0x0b, 0x10, 0x36, 0x73, 0x85, 0x41, 0x0c, 0xa4, 0x46, 0xb2, 0x49, 0x91,
	0x6b, 0x75, 0x88, 0x45, 0x56, 0x38, 0x27, 0x16, 0xaf, 0x29, 0x1a, 0x96, 0xf1, 0x6a, 0x0d, 0x5b,
	0xb6, 0xdc, 0x12, 0x19, 0x7f, 0x09, 0x60, 0xc4, 0x9b, 0x42, 0xc6, 0x56, 0x85, 0x98, 0x16, 0x46,
	0x33, 0x70, 0xd0, 0x70, 0x36, 0xc2, 0x20, 0xf6, 0x4b, 0x6a, 0x24, 0x3b, 0x21, 0x76, 0xb8, 0x28,
	0x76, 0x86, 0xca, 0x0c, 0x8f, 0x2e, 0xb7, 0x69, 0x1c, 0xa0, 0x1a, 0x27, 0xfb, 0x6a, 0x64, 0xac,
	0x6d, 0x22, 0x5f, 0x01, 0xf8, 0xaf, 0xa7, 0x48, 0x74, 0x11, 0xfe, 0xa9, 0x62, 0x03, 0x6b, 0x8a,
	0x4d, 0xaa, 0xcb, 0x8a, 0xaa, 0x56, 0xa9, 0x15, 0xbf, 0xe7, 0xc2, 0xbb, 0x5b, 0xe9, 0x31, 0xce,
	0x74, 0x49, 0x55, 0xab, 0xd8, 0xb2, 0x96, 0xec, 0xaa, 0x6e, 0x6a, 0xf2, 0x1f, 0x2e, 0xde, 0xd9,
	0x77, 0x12, 0xd4, 0x15, 0x43, 0x57, 0x9b, 0x09, 0x06, 0xfa, 0x25, 0x70, 0xf1, 0xce, 0xfe, 0xb9,
	0xe1, 0xc7, 0x9b, 0xd1, 0xd0, 0xd7, 0xcd, 0x68, 0x28, 0x6e, 0xc0, 0x63, 0x9e, 0x22, 0x5d, 0x23,
	0xcf, 0xc0, 0x5f, 0x1d, 0x63, 0xf8, 0x6d, 0x05, 0xf0, 0x91, 0xc2, 0xd1, 0x18, 0x1c, 0xbc, 0x47,
	0x6a, 0xa6, 0x4a, 0x95, 0x0d, 0xcb, 0x6c, 0x11, 0x2f, 0xc0, 0x70, 0x17, 0xdb, 0x4d, 0xd3, 0x38,
	0xd4, 0xe6, 0x78, 0x03, 0x60, 0xcc, 0x8f, 0xc4, 0xad, 0x6a, 0x0e, 0xfe, 0x56, 0x33, 0x5b, 0x1b,
	0x24, 0xd1, 0xb3, 0x30, 0x16, 0x2e, 0x37, 0x62, 0x0e, 0xaf, 0x49, 0x5e, 0x03, 0xf8, 0xbf, 0x8f,
	0xd8, 0x9f, 0xaa, 0x4d, 0x6c, 0x18, 0xf5, 0x91, 0xe9, 0x5a, 0x3a, 0x0b, 0x87, 0x98, 0x3d, 0xfc,
	0xee, 0x02, 0x39, 0xca, 0x43, 0x7c, 0xda, 0x65, 0x12, 0x8e, 0x52, 0xd6, 0x1c, 0x31, 0xd5, 0xdb,
	0x58, 0xd7, 0x56, 0x6c, 0x07, 0xa8, 0x62, 0x93, 0x94, 0x99, 0x17, 0x32, 0x5b, 0xc4, 0x1f, 0x35,
	0x6c, 0x6c, 0x22, 0x5d, 0x5d, 0x37, 0xe0, 0xd0, 0x7d, 0xba, 0xc3, 0xed, 0x3b, 0xbf, 0xbd, 0x17,
	0x0d, 0x7d, 0xda, 0x8b, 0x26, 0x35, 0xdd, 0x5e, 0xa9, 0x15, 0xc4, 0x22, 0x29, 0xf3, 0x71, 0xc9,
	0x3f, 0xd2, 0x96, 0x5a, 0x92, 0xec, 0xb5, 0x0a, 0xb6, 0xc4, 0x3c, 0x2e, 0xee, 0x6e, 0xa5, 0x21,
	0xf7, 0x2a, 0x8f, 0x8b, 0x32, 0xcf, 0xe5, 0x23, 0xb8, 0xc4, 0xe7, 0xd2, 0xad, 0x86, 0x8d, 0xad,
	0x25, 0xcf, 0x13, 0xdd, 0xf4, 0xb8, 0x13, 0xf0, 0xa3, 0x77, 0x72, 0x01, 0x26, 0x7b, 0x93, 0xb9,
	0x16, 0x78, 0x9a, 0x96, 0x7d, 0x31, 0x0c, 0x07, 0x69, 0x02, 0xf4, 0x1c, 0xc0, 0xbf, 0xbb, 0xa7,
	0xf5, 0x64, 0xd7, 0x05, 0x7a, 0xcf, 0x5c, 0x41, 0x0a, 0x08, 0x6c, 0xe8, 0x89, 0x4f, 0x3d, 0xfc,
	0xf0, 0xe5, 0xd9, 0x40, 0x02, 0x4d, 0x48, 0x55, 0xac, 0x18, 0x3a, 0xb1, 0x71, 0x71, 0x45, 0xea,
	0xfc, 0x91, 0x62, 0x2f, 0xed, 0x2d, 0x80, 0x7f, 0x75, 0x0d, 0xd0, 0x64, 0x30, 0x42, 0x41, 0x0c,
	0x86, 0x73, 0x75, 0x5d, 0xa1, 0xba, 0xf2, 0x28, 0xd7, 0x4f, 0x97, 0xb4, 0xde, 0x7e, 0x89, 0x1b,
	0xd2, 0x7a, 0xfb, 0x53, 0xdd, 0x40, 0x9b, 0x00, 0xfe, 0xe3, 0x35, 0xe6, 0xa6, 0xfa, 0x6b, 0xe2,
	0x50, 0x21, 0x13, 0x18, 0xea, 0x56, 0x70, 0x82, 0x56, 0x70, 0x1c, 0x25, 0x7a, 0x55, 0xd0, 0x98,
	0x62, 0xef, 0x00, 0x44, 0x1e, 0x73, 0x27, 0x15, 0x94, 0x56, 0x38, 0x15, 0x14, 0xe9, 0xea, 0x5b,
	0xa4, 0xfa, 0x16, 0x50, 0xbe, 0xbf, 0xbe, 0x00, 0x1e, 0xbf, 0x07, 0x70, 0xdc, 0xff, 0xa9, 0xf9,
	0xb4, 0xa5, 0x6f, 0x80, 0x30, 0xf3, 0x9d, 0x01, 0x6e, 0x55, 0xf3, 0xb4, 0xaa, 0x39, 0x34, 0xdb,
	0xab, 0x2a, 0xb7, 0x9a, 0x74, 0x91, 0xe8, 0x66, 0x57, 0x75, 0xe8, 0x09, 0x80, 0xb0, 0x65, 0xd0,
	0xc5, 0xbc, 0xc5, 0x34, 0x11, 0x42, 0xaa, 0x1f, 0xc2, 0xd5, 0x97, 0xa5, 0xfa, 0x4e, 0xa2, 0xe9,
	0x5e, 0xfa, 0xd8, 0x60, 0x73, 0x4c, 0x36, 0x49, 0x79, 0x23, 0xb7, 0xb4, 0xbd, 0x1f, 0x01, 0x3b,
	0xfb, 0x11, 0xf0, 0x79, 0x3f, 0x02, 0x9e, 0x1e, 0x44, 0x42, 0x3b, 0x07, 0x91, 0xd0, 0xc7, 0x83,
	0x48, 0xe8, 0xce, 0xd9, 0x96, 0xc1, 0xd9, 0x99, 0x2f, 0xdd, 0x48, 0xf8, 0xa0, 0x63, 0x4d, 0xe7,
	0x69, 0x61, 0x88, 0xfe, 0x43, 0x3c, 0xfd, 0x2d, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x86, 0xba, 0x33,
	0xf1, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	MultiStakingLocks(ctx context.Context, in *QueryMultiStakingLocks, opts ...grpc.CallOption) (*QueryMultiStakingLocksResponse, error)
	MultiStakingLock(ctx context.Context, in *QueryMultiStakingLock, opts ...grpc.CallOption) (*QueryMultiStakingLockResponse, error)
	MultiStakingUnlocks(ctx context.Context, in *QueryMultiStakingUnlocks, opts ...grpc.CallOption) (*QueryMultiStakingUnlocksResponse, error)
	MultiStakingUnlock(ctx context.Context, in *QueryMultiStakingUnlock, opts ...grpc.CallOption) (*QueryMultiStakingUnlockResponse, error)
	ValidatorMultiStakingCoin(ctx context.Context, in *QueryValidatorMultiStakingCoin, opts ...grpc.CallOption) (*QueryValidatorMultiStakingCoinResponse, error)
	BondWeight(ctx context.Context, in *QueryBondWeight, opts ...grpc.CallOption) (*QueryBondWeightResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) MultiStakingLocks(ctx context.Context, in *QueryMultiStakingLocks, opts ...grpc.CallOption) (*QueryMultiStakingLocksResponse, error) {
	out := new(QueryMultiStakingLocksResponse)
	err := c.cc.Invoke(ctx, "/multistaking.v1.Query/MultiStakingLocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MultiStakingLock(ctx context.Context, in *QueryMultiStakingLock, opts ...grpc.CallOption) (*QueryMultiStakingLockResponse, error) {
	out := new(QueryMultiStakingLockResponse)
	err := c.cc.Invoke(ctx, "/multistaking.v1.Query/MultiStakingLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MultiStakingUnlocks(ctx context.Context, in *QueryMultiStakingUnlocks, opts ...grpc.CallOption) (*QueryMultiStakingUnlocksResponse, error) {
	out := new(QueryMultiStakingUnlocksResponse)
	err := c.cc.Invoke(ctx, "/multistaking.v1.Query/MultiStakingUnlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MultiStakingUnlock(ctx context.Context, in *QueryMultiStakingUnlock, opts ...grpc.CallOption) (*QueryMultiStakingUnlockResponse, error) {
	out := new(QueryMultiStakingUnlockResponse)
	err := c.cc.Invoke(ctx, "/multistaking.v1.Query/MultiStakingUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorMultiStakingCoin(ctx context.Context, in *QueryValidatorMultiStakingCoin, opts ...grpc.CallOption) (*QueryValidatorMultiStakingCoinResponse, error) {
	out := new(QueryValidatorMultiStakingCoinResponse)
	err := c.cc.Invoke(ctx, "/multistaking.v1.Query/ValidatorMultiStakingCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BondWeight(ctx context.Context, in *QueryBondWeight, opts ...grpc.CallOption) (*QueryBondWeightResponse, error) {
	out := new(QueryBondWeightResponse)
	err := c.cc.Invoke(ctx, "/multistaking.v1.Query/BondWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	MultiStakingLocks(context.Context, *QueryMultiStakingLocks) (*QueryMultiStakingLocksResponse, error)
	MultiStakingLock(context.Context, *QueryMultiStakingLock) (*QueryMultiStakingLockResponse, error)
	MultiStakingUnlocks(context.Context, *QueryMultiStakingUnlocks) (*QueryMultiStakingUnlocksResponse, error)
	MultiStakingUnlock(context.Context, *QueryMultiStakingUnlock) (*QueryMultiStakingUnlockResponse, error)
	ValidatorMultiStakingCoin(context.Context, *QueryValidatorMultiStakingCoin) (*QueryValidatorMultiStakingCoinResponse, error)
	BondWeight(context.Context, *QueryBondWeight) (*QueryBondWeightResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) MultiStakingLocks(ctx context.Context, req *QueryMultiStakingLocks) (*QueryMultiStakingLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiStakingLocks not implemented")
}
func (*UnimplementedQueryServer) MultiStakingLock(ctx context.Context, req *QueryMultiStakingLock) (*QueryMultiStakingLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiStakingLock not implemented")
}
func (*UnimplementedQueryServer) MultiStakingUnlocks(ctx context.Context, req *QueryMultiStakingUnlocks) (*QueryMultiStakingUnlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiStakingUnlocks not implemented")
}
func (*UnimplementedQueryServer) MultiStakingUnlock(ctx context.Context, req *QueryMultiStakingUnlock) (*QueryMultiStakingUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiStakingUnlock not implemented")
}
func (*UnimplementedQueryServer) ValidatorMultiStakingCoin(ctx context.Context, req *QueryValidatorMultiStakingCoin) (*QueryValidatorMultiStakingCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorMultiStakingCoin not implemented")
}
func (*UnimplementedQueryServer) BondWeight(ctx context.Context, req *QueryBondWeight) (*QueryBondWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondWeight not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_MultiStakingLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiStakingLocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MultiStakingLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multistaking.v1.Query/MultiStakingLocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MultiStakingLocks(ctx, req.(*QueryMultiStakingLocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MultiStakingLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiStakingLock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MultiStakingLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multistaking.v1.Query/MultiStakingLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MultiStakingLock(ctx, req.(*QueryMultiStakingLock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MultiStakingUnlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiStakingUnlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MultiStakingUnlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multistaking.v1.Query/MultiStakingUnlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MultiStakingUnlocks(ctx, req.(*QueryMultiStakingUnlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MultiStakingUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiStakingUnlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MultiStakingUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multistaking.v1.Query/MultiStakingUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MultiStakingUnlock(ctx, req.(*QueryMultiStakingUnlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorMultiStakingCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorMultiStakingCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorMultiStakingCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multistaking.v1.Query/ValidatorMultiStakingCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorMultiStakingCoin(ctx, req.(*QueryValidatorMultiStakingCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BondWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBondWeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BondWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multistaking.v1.Query/BondWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BondWeight(ctx, req.(*QueryBondWeight))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "multistaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MultiStakingLocks",
			Handler:    _Query_MultiStakingLocks_Handler,
		},
		{
			MethodName: "MultiStakingLock",
			Handler:    _Query_MultiStakingLock_Handler,
		},
		{
			MethodName: "MultiStakingUnlocks",
			Handler:    _Query_MultiStakingUnlocks_Handler,
		},
		{
			MethodName: "MultiStakingUnlock",
			Handler:    _Query_MultiStakingUnlock_Handler,
		},
		{
			MethodName: "ValidatorMultiStakingCoin",
			Handler:    _Query_ValidatorMultiStakingCoin_Handler,
		},
		{
			MethodName: "BondWeight",
			Handler:    _Query_BondWeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multistaking/v1/query.proto",
}

func (m *QueryMultiStakingLocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiStakingLocks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiStakingLocks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiStakingLocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiStakingLocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiStakingLocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiStakingLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiStakingLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiStakingLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiStakingLockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiStakingLockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiStakingLockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Lock != nil {
		{
			size, err := m.Lock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiStakingUnlocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiStakingUnlocks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiStakingUnlocks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiStakingUnlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiStakingUnlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiStakingUnlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Unlocks) > 0 {
		for iNdEx := len(m.Unlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiStakingUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiStakingUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiStakingUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiStakingUnlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiStakingUnlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiStakingUnlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Unlock != nil {
		{
			size, err := m.Unlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondWeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidatorMultiStakingCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorMultiStakingCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorMultiStakingCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorMultiStakingCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorMultiStakingCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorMultiStakingCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMultiStakingLocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMultiStakingLocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMultiStakingLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMultiStakingLockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lock != nil {
		l = m.Lock.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryMultiStakingUnlocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMultiStakingUnlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unlocks) > 0 {
		for _, e := range m.Unlocks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMultiStakingUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMultiStakingUnlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unlock != nil {
		l = m.Unlock.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryBondWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBondWeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Weight.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryValidatorMultiStakingCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorMultiStakingCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMultiStakingLocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiStakingLocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiStakingLocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiStakingLocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiStakingLocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiStakingLocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &MultiStakingLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiStakingLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiStakingLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiStakingLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiStakingLockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiStakingLockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiStakingLockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lock == nil {
				m.Lock = &MultiStakingLock{}
			}
			if err := m.Lock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiStakingUnlocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiStakingUnlocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiStakingUnlocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiStakingUnlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiStakingUnlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiStakingUnlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unlocks = append(m.Unlocks, &MultiStakingUnlock{})
			if err := m.Unlocks[len(m.Unlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiStakingUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiStakingUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiStakingUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiStakingUnlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiStakingUnlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiStakingUnlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unlock == nil {
				m.Unlock = &MultiStakingUnlock{}
			}
			if err := m.Unlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorMultiStakingCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorMultiStakingCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorMultiStakingCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorMultiStakingCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorMultiStakingCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorMultiStakingCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
